# =====================================
# chip-seq_mm10_a.snake
# =====================================
# This script is written to process ChIP-seq data. The repo contains README.md
# file and scripts dir. 

# =====================================
# How to run this script
# =====================================
#   1. This script resides in a directory with the following subdirectries and
#      scripts:
#
#       a. fq: This directory holds the ATAC seq data.
#      
#       b. chip-seq_snakemake_job.sh: This is a wrapper script for running the
#          batch job.
#       
#       c. cluster.yml: This file holds cluster-specific parameters. 
#       
#       d. mm_config.yaml: This is a configuration file holding parameters and
#          file paths.
#
#   2. The sample file name inside the 'fq' directory should be in
#      <{base_name}.fq.gz> format.
#
#   3. This script requires several reference files that are available in
#      centrally-maintained and updated scientific database in biowulf. Provide
#      the path of these files in config file.
#
#   4. The script does not remove the large number of directories and files
#      created during the process and those files may not require for
#      downstream analysis. Remove them.
#   5. Implement the script dry and note the numbr of job required. Put number
#      of jobs (-j flag) in chip-seq_mm
#
#   6. Running the script:
#                           dry run:
#                                   < module load snakemake/6.8.2 >
#                                   < snakemake -s chip-seq_mm10_a.snake >
#                           batch job:
#                                   < sbatch chip-seq_snakemake_job.sh >
#

configfile: "hs_config.yaml"
#SAMPLES = "s01 s02".split()
SAMPLES, = glob_wildcards("fq/{smp}.fq.gz")

rule all:
  input:
   (
    expand("homer/bg/{smp}.bg", smp = SAMPLES),
    expand("homer/bw/{smp}.bw", smp = SAMPLES),
    expand("fastQC/{smp}_trimmed_fastqc.html", smp = SAMPLES)
    )
      	
rule trim:
  input: "fq/{smp}.fq.gz"
  output:
    "fq_trim/{smp}_trimmed.fq.gz"
  threads: 4
  params:
    mem = "5G"
  shell:
    '''
    module load trimgalore/0.6.7
    trim_galore {input} -o fq_trim
    '''

rule fastQC:
  input: "fq_trim/{smp}_trimmed.fq.gz"
  output: 
    o1 = "fastQC/{smp}_trimmed_fastqc.html",
    o2 = "fastQC/{smp}_trimmed_fastqc.zip"
  params:
    mem = "10G",
    dir = "fastQC"
  threads: 12
  shell:
    '''
    mkdir -p fastQC
    module load fastqc/0.11.9
    fastqc -t {threads} -o {params.dir} {input}
    '''

rule mapping:
  input: 
    "fq_trim/{smp}_trimmed.fq.gz"
  output:
    o1="sam/{smp}.sam",
    o2="bowtie_out/{smp}.out"
  threads: 12
  params:
    index=config["bowtie_index"]["hg38"],
    mem = "10G"
  shell: 
    '''
    module load bowtie/1.1.1
    gzip -dc {input} | bowtie -p 12 -v 2 -m 1 {params.index} -S -  {output.o1} 2> {output.o2}
    '''

rule sam_to_bam:
  input: 
    "sam/{smp}.sam"
  output:
    "bam/{smp}.bam"
  threads: 1
  params:
    mem = "5G"
  shell: 
    '''
    module load samtools/1.13
    samtools view -bS -o {output} {input}
    '''

rule bam_to_sorted_bam:
  input:
    "bam/{smp}.bam"
  output: 
    "bam_s/{smp}.bam"
  threads: 1
  params:
    mem = "5G"
  shell: 
    '''
    module load samtools/1.13
    samtools sort {input} -o {output}
    '''
 
rule sorted_bam_to_bed:
  input: 
    "bam_s/{smp}.bam"
  output:
    "bed/{smp}.bed"
  threads: 1
  params:
    mem = "5G"
  shell: 
    "module load bedtools/2.30.0; bedtools bamtobed -i {input} > {output}"

rule bed_to_sorted_bed:
  input:
    "bed/{smp}.bed"
  output:
    "bed_s/{smp}.bed"
  threads: 1
  params:
    mem = "15G"
  shell:
    '''
    module load bedops/2.4.40
    sort-bed --max-mem 10G {input} | awk '{{OFS = "\t"}} {{$4 = $3-$2}}; {{print $0 }}' > {output}
    '''

rule sorted_bed_to_nr_bed:
  input:
    "bed_s/{smp}.bed"
  output:
    "bed_nr/{smp}.bed"
  threads: 1
  params:
    mem = "5G"
  shell:
    "uniq {input} > {output}"

rule make_homer_folders:
  input: "bed_nr/{smp}.bed"
  output:
    o1=directory("homer/{smp}")
  threads: 1
  params:
    mem = "5G"
  shell:
    '''
    module load homer/4.11.1
    makeTagDirectory {output.o1} {input} -format bed -forceBED
    '''

rule homer_mk_bedGraph:
  input: "homer/{smp}"
  output:"homer/bg/{smp}.bg"
  threads: 1
  params:
    mem = "5G"
  shell:
    '''
    module load homer/4.11.1
    makeUCSCfile {input} -noheader > {output}
    '''

rule mk_bw:
  input: "homer/bg/{smp}.bg"
  output: "homer/bw/{smp}.bw"
  threads: 1
  params:
    g_size=config["genome_size"]["hg38"],
    mem = "5G"
  shell:
    '''
    module load ucsc/418
    bedGraphToBigWig {input} {params.g_size} {output}
    '''
    
